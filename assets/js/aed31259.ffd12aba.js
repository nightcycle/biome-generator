"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[880],{48047:e=>{e.exports=JSON.parse('{"functions":[{"name":"SetMap","desc":"Gets a noise map at a specified category.\\nSets a noise map for usage.","params":[{"name":"key","desc":"","lua_type":"string"},{"name":"map","desc":"","lua_type":"Types.NoiseMap<T>"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","source":{"line":39,"path":"src/init.lua"}},{"name":"new","desc":"Constructs a landmaster.","params":[{"name":"config","desc":"","lua_type":"LandmasterConfigData"}],"returns":[{"desc":"","lua_type":"Landmaster\\r\\n"}],"function_type":"static","source":{"line":45,"path":"src/init.lua"}},{"name":"Debug","desc":"Renders a map gui for the provided solver.","params":[{"name":"map","desc":"","lua_type":"NoiseSolver"},{"name":"resolution","desc":"","lua_type":"number"},{"name":"scale","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Frame\\r\\n"}],"function_type":"method","source":{"line":58,"path":"src/init.lua"}},{"name":"GetTerrainColumnData","desc":"Gets the TerrainColumnData at a specific world position on the map.","params":[{"name":"columnPosition","desc":"","lua_type":"Vector3"}],"returns":[{"desc":"","lua_type":"Types.TerrainColumnData\\r\\n"}],"function_type":"method","source":{"line":81,"path":"src/init.lua"}},{"name":"SolveRegionTerrain","desc":"Given a world region3 it constructs a grid normalized region and the material + precision data tables needed for Terrain:WriteVoxels(). Should be parallel safe. As ","params":[{"name":"region","desc":"","lua_type":"Region3"},{"name":"scale","desc":"","lua_type":"_Math.Alpha?"}],"returns":[{"desc":"","lua_type":"Region3"},{"desc":"","lua_type":"TerrainData<Enum.Material>"},{"desc":"","lua_type":"TerrainData<number>"}],"function_type":"method","source":{"line":104,"path":"src/init.lua"}},{"name":"BuildRegionTerrain","desc":"Writes voxels based on the returned values of SolveRegionTerrain.","params":[{"name":"gridRegion","desc":"","lua_type":"Region3"},{"name":"materialData","desc":"","lua_type":"TerrainData<Enum.Material>"},{"name":"precisionData","desc":"","lua_type":"TerrainData<number>"}],"returns":[],"function_type":"method","source":{"line":287,"path":"src/init.lua"}}],"properties":[],"types":[{"name":"NoiseSolver","desc":"Returns a deterministic value at position on map. The vector must be normalized to be within 0 and 1.","lua_type":"(Vector2) -> number","source":{"line":12,"path":"src/Types.lua"}},{"name":"LandmasterConfigData","desc":"The data format usable when configuring Landmaster","lua_type":"{Seed: number,Origin: Vector2,Frequency: number,Width: number,HeightCeiling: number, WaterHeight: number,Maps: {Height: NoiseSolver?,Heat: NoiseSolver?,Rain: NoiseSolver?},}","source":{"line":18,"path":"src/Types.lua"}},{"name":"TerrainColumnData","desc":"The data format used in solving each column of terrain.","lua_type":"{Height: number,Normal: _Math.Alpha,SurfaceMaterial: Enum.Material}","source":{"line":42,"path":"src/Types.lua"}},{"name":"TerrainData","desc":"Data usable within Terrain:WriteVoxels().","lua_type":"{[number]: {[number]: {[number]: T}}}","source":{"line":67,"path":"src/Types.lua"}}],"name":"Landmaster","desc":"A configurable worker that can solve and build terrain.\\nCleans up landmaster.","source":{"line":23,"path":"src/init.lua"}}')}}]);